<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\Http_demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\Http_demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Fri Jan 04 22:57:38 2013
<BR><P>
<H3>Maximum Stack Usage =        312 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; main_TcpNet &rArr; run_system &rArr; run_eth_link &rArr; process_hl_tcp &rArr; process_tcp &rArr; tcp_send_reset &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[1]">Undef_Handler</a>
 <LI><a href="#[2]">SWI_Handler</a>
 <LI><a href="#[3]">PAbt_Handler</a>
 <LI><a href="#[4]">DAbt_Handler</a>
 <LI><a href="#[5]">IRQ_Handler</a>
 <LI><a href="#[6]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1a]">mem_test</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">mem_test</a><BR>
 <LI><a href="#[2c]">sys_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">sys_error</a><BR>
 <LI><a href="#[1]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">Undef_Handler</a><BR>
 <LI><a href="#[2]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">SWI_Handler</a><BR>
 <LI><a href="#[3]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">PAbt_Handler</a><BR>
 <LI><a href="#[4]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">DAbt_Handler</a><BR>
 <LI><a href="#[5]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">IRQ_Handler</a><BR>
 <LI><a href="#[6]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">FIQ_Handler</a><BR>
 <LI><a href="#[a1]">str_up_case</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a1]">str_up_case</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">DAbt_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[6]">FIQ_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[5]">IRQ_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[3]">PAbt_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[2]">SWI_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[1]">Undef_Handler</a> from sam7.o(RESET) referenced from sam7.o(RESET)
 <LI><a href="#[13]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from sam7.o(RESET)
 <LI><a href="#[c]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[d]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[b]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[f]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[a]">def_interrupt</a> from emac_sam7x.o(.text) referenced from emac_sam7x.o(.text)
 <LI><a href="#[10]">dhcp_listener</a> from at_dhcp.o(i.dhcp_listener) referenced from at_dhcp.o(i.init_dhcp)
 <LI><a href="#[11]">http_listener</a> from at_http.o(i.http_listener) referenced from at_http.o(i.init_http)
 <LI><a href="#[9]">interrupt_ethernet</a> from emac_sam7x.o(.text) referenced from emac_sam7x.o(.text)
 <LI><a href="#[e]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[8]">main</a> from http_demo.o(.text) referenced from entry8.o(.ARM.Collect$$$$00000009)
 <LI><a href="#[12]">nbns_listener</a> from at_nbns.o(i.nbns_listener) referenced from at_nbns.o(i.init_nbns)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>__main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[bd]"></a>_main_stk</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[14]"></a>_main_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via Veneer)
</UL>

<P><STRONG><a name="[53]"></a>__main_after_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via Veneer)
</UL>

<P><STRONG><a name="[be]"></a>_main_clock</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[bf]"></a>_main_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[c0]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, http_demo.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>LED_out</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, http_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LED_out
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_data
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b]"></a>get_button</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, http_demo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_func
</UL>

<P><STRONG><a name="[8]"></a>main</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, http_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = main &rArr; main_TcpNet &rArr; run_system &rArr; run_eth_link &rArr; process_hl_tcp &rArr; process_tcp &rArr; tcp_send_reset &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_TcpNet
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TcpNet
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_disable
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_out
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_io
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[1d]"></a>cgi_process_var</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, http_cgi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = cgi_process_var &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_var
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[23]"></a>cgi_process_data</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, http_cgi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cgi_process_data &rArr; http_get_var
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_copy
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_var
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_out
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
</UL>

<P><STRONG><a name="[27]"></a>cgi_func</STRONG> (Thumb, 828 bytes, Stack size 64 bytes, http_cgi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cgi_func &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_lang
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_http_server
</UL>

<P><STRONG><a name="[2c]"></a>sys_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_socket
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_socket
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>

<P><STRONG><a name="[2d]"></a>init_system</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = init_system &rArr; init_http &rArr; tcp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_udp
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tcp
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_nbns
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_http
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_eth_link
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dhcp
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TcpNet
</UL>

<P><STRONG><a name="[34]"></a>run_system</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = run_system &rArr; run_eth_link &rArr; process_hl_tcp &rArr; process_tcp &rArr; tcp_send_reset &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_http_server
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_dhcp_client
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_TcpNet
</UL>

<P><STRONG><a name="[39]"></a>process_hl_udp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = process_hl_udp &rArr; process_udp &rArr; CalcChksumBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_udp
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[3b]"></a>process_hl_tcp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = process_hl_tcp &rArr; process_tcp &rArr; tcp_send_reset &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[3d]"></a>dispatch_frame</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
</UL>

<P><STRONG><a name="[9d]"></a>igmp_is_member</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
</UL>

<P><STRONG><a name="[42]"></a>init_ethernet</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, emac_sam7x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = init_ethernet &rArr; rx_descr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_PHY
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_PHY
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_descr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_eth_link
</UL>

<P><STRONG><a name="[61]"></a>int_enable_eth</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, emac_sam7x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize_mem
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_eth_link
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>

<P><STRONG><a name="[60]"></a>int_disable_eth</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, emac_sam7x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize_mem
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_eth_link
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TcpNet
</UL>

<P><STRONG><a name="[6b]"></a>send_frame</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, emac_sam7x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_req
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_uidivmod</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_renew
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utc_to_http
</UL>

<P><STRONG><a name="[25]"></a>strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_script_line
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_data
</UL>

<P><STRONG><a name="[2a]"></a>strcmp</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_func
</UL>

<P><STRONG><a name="[21]"></a>__0sscanf</STRONG> (Thumb, 50 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_var
</UL>

<P><STRONG><a name="[46]"></a>_scanf_int</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[49]"></a>atoi</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_to_utc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_rq
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[48]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[45]"></a>__vfscanf_char</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[b]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>_sbackspace</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[15]"></a>__scatterload</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload (via Veneer)
</UL>

<P><STRONG><a name="[c2]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_llsl</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[c3]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_llsr</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[c4]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[e]"></a>isspace</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>__vfscanf</STRONG> (Thumb, 862 bytes, Stack size 80 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string (Weak Reference)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real (Weak Reference)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong (Weak Reference)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[51]"></a>_strtoul</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[58]"></a>CalcChksum</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, at_lib.o(i.CalcChksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalcChksum &rArr; CalcChksumBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_chksum
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_icmp
</UL>

<P><STRONG><a name="[59]"></a>CalcChksumBuf</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, at_lib.o(i.CalcChksumBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CalcChksumBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksum
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_udp
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[a6]"></a>CalcChksumVal</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at_lib.o(i.CalcChksumVal))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_udp
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[5a]"></a>SwapB</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at_lib.o(i.SwapB))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksum
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_udp
</UL>

<P><STRONG><a name="[5b]"></a>__0sprintf$8</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c5]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[28]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utc_to_http
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_func
</UL>

<P><STRONG><a name="[47]"></a>__ARM_common_call_via_r1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _scanf_int.o(i.__ARM_common_call_via_r1))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[54]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, printf1.o(i.__ARM_common_call_via_r2))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[52]"></a>__ARM_common_call_via_r3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(i.__ARM_common_call_via_r3))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b0]"></a>__ARM_common_call_via_r4</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at_udp.o(i.__ARM_common_call_via_r4))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_udp
</UL>

<P><STRONG><a name="[aa]"></a>__ARM_common_call_via_r5</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at_tcp.o(i.__ARM_common_call_via_r5))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[5f]"></a>__ARM_common_call_via_r6</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at_tcp.o(i.__ARM_common_call_via_r6))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>

<P><STRONG><a name="[a8]"></a>__ARM_common_call_via_r7</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at_tcp.o(i.__ARM_common_call_via_r7))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[76]"></a>__ARM_common_switch8</STRONG> (ARM, 24 bytes, Stack size 0 bytes, at_tcp.o(i.__ARM_common_switch8))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener (via Veneer)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener (via Veneer)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header (via Veneer)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close (via Veneer)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort (via Veneer)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit (via Veneer)
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_http_server (via Veneer)
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_dhcp_client (via Veneer)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp (via Veneer)
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[c6]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[c7]"></a>__scatterload_copy</STRONG> (ARM, 28 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c8]"></a>__scatterload_null</STRONG> (ARM, 4 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c9]"></a>__scatterload_zeroinit</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1e]"></a>alloc_mem</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, at_mem.o(i.alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_enable_eth
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_req
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_icmp
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_rq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_buf
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_buf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetch_packet
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_data
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_var
</UL>

<P><STRONG><a name="[62]"></a>arp_cache_add</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, at_arp.o(i.arp_cache_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = arp_cache_add &rArr; is_subnet &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[66]"></a>arp_cache_find</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, at_arp.o(i.arp_cache_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_req
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
</UL>

<P><STRONG><a name="[68]"></a>arp_cache_update</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, at_arp.o(i.arp_cache_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = arp_cache_update &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_req
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[67]"></a>arp_send_req</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, at_arp.o(i.arp_send_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_frame
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_update
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
</UL>

<P><STRONG><a name="[93]"></a>b64_to_asc</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, at_lib.o(i.b64_to_asc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = b64_to_asc
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
</UL>

<P><STRONG><a name="[82]"></a>cgx_content_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_http.o(i.cgx_content_type))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
</UL>

<P><STRONG><a name="[1b]"></a>dhcp_disable</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, at_dhcp.o(i.dhcp_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dhcp_disable &rArr; udp_release_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_notify (Weak Reference)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_release_socket
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_close
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>eth_chk_adr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, at_ethernet.o(i.eth_chk_adr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = eth_chk_adr &rArr; mem_comp
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
</UL>

<P><STRONG><a name="[3e]"></a>eth_send_frame</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, at_ethernet.o(i.eth_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_bcast
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_frame
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_frame
</UL>

<P><STRONG><a name="[22]"></a>free_mem</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, at_mem.o(i.free_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_enable_eth
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_req
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_icmp
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_retransmit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_in_queue
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_data
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_var
</UL>

<P><STRONG><a name="[7c]"></a>get_crc</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, at_lib.o(i.get_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_crc
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dhcp
</UL>

<P><STRONG><a name="[75]"></a>get_u32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_lib.o(i.get_u32))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_renew
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[89]"></a>http_accept_host</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_http.o(i.http_accept_host))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[88]"></a>http_fclose</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at_http_uif.o(i.http_fclose))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_http_server
</UL>

<P><STRONG><a name="[b1]"></a>http_fgets</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_http_uif.o(i.http_fgets))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_script_line
</UL>

<P><STRONG><a name="[91]"></a>http_finfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_http_uif.o(i.http_finfo))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
</UL>

<P><STRONG><a name="[90]"></a>http_fopen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_http_uif.o(i.http_fopen))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
</UL>

<P><STRONG><a name="[b8]"></a>http_fread</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_http_uif.o(i.http_fread))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_http_server
</UL>

<P><STRONG><a name="[29]"></a>http_get_lang</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at_http.o(i.http_get_lang))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_func
</UL>

<P><STRONG><a name="[1f]"></a>http_get_var</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, at_http.o(i.http_get_var))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = http_get_var
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2byte
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_data
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_var
</UL>

<P><STRONG><a name="[17]"></a>init_TcpNet</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, at_system.o(i.init_TcpNet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_TcpNet &rArr; init_system &rArr; init_http &rArr; tcp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mem
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>init_arp</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, at_arp.o(i.init_arp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_arp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_eth_link
</UL>

<P><STRONG><a name="[33]"></a>init_dhcp</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, at_dhcp.o(i.init_dhcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_dhcp &rArr; udp_open &rArr; udp_get_free_port
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_open
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_socket
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[2e]"></a>init_eth_link</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, at_ethernet.o(i.init_eth_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_eth_link &rArr; init_ethernet &rArr; rx_descr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_arp
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_enable_eth
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[31]"></a>init_http</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, at_http.o(i.init_http))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init_http &rArr; tcp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[96]"></a>init_mem</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at_mem.o(i.init_mem))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TcpNet
</UL>

<P><STRONG><a name="[32]"></a>init_nbns</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, at_nbns.o(i.init_nbns))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = init_nbns &rArr; udp_open &rArr; udp_get_free_port
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_open
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[30]"></a>init_tcp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, at_tcp.o(i.init_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_tcp
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[2f]"></a>init_udp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, at_udp.o(i.init_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_udp
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[9c]"></a>ip_chk_frame</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, at_ip.o(i.ip_chk_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ip_chk_frame &rArr; ip_get_chksum &rArr; CalcChksum &rArr; CalcChksumBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_chksum
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_chk_adr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_is_member
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[9f]"></a>ip_get_locadr</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, at_ip.o(i.ip_get_locadr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ip_get_locadr &rArr; is_subnet &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
</UL>

<P><STRONG><a name="[a0]"></a>ip_send_frame</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, at_ip.o(i.ip_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_chksum
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_icmp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
</UL>

<P><STRONG><a name="[63]"></a>is_subnet</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, at_lib.o(i.is_subnet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = is_subnet &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_bcast
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
</UL>

<P><STRONG><a name="[80]"></a>is_subnet_bcast</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, at_arp.o(i.is_subnet_bcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = is_subnet_bcast &rArr; is_subnet &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
</UL>

<P><STRONG><a name="[19]"></a>main_TcpNet</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, at_system.o(i.main_TcpNet))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = main_TcpNet &rArr; run_system &rArr; run_eth_link &rArr; process_hl_tcp &rArr; process_tcp &rArr; tcp_send_reset &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>mem_comp</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, at_lib.o(i.mem_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_get_response
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_arp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_update
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_chk_adr
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_data
</UL>

<P><STRONG><a name="[65]"></a>mem_copy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at_lib.o(i.mem_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_req
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_get_response
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_icmp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_bcast
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_sel
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_http_server
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_dhcp_client
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dhcp
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TcpNet
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_disable
</UL>

<P><STRONG><a name="[6c]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at_lib.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_req
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_release_socket
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_dhcp_client
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_udp
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tcp
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dhcp
</UL>

<P><STRONG><a name="[1a]"></a>mem_test</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at_lib.o(i.mem_test))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_dhcp_client
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>poll_ethernet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at_ethernet.o(i.poll_ethernet))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[a3]"></a>process_arp</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, at_arp.o(i.process_arp))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = process_arp &rArr; arp_send_reply &rArr; arp_cache_add &rArr; is_subnet &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_get_response
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[b3]"></a>process_hl_igmp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at_ethernet.o(i.process_hl_igmp))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[a4]"></a>process_icmp</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, at_icmp.o(i.process_icmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = process_icmp &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksum
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[3c]"></a>process_tcp</STRONG> (Thumb, 1096 bytes, Stack size 32 bytes, at_tcp.o(i.process_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = process_tcp &rArr; tcp_send_reset &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize_mem
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumVal
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumBuf
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r7
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r6
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r5
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_retransmit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_opt
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init_seq
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_hl_tcp
</UL>

<P><STRONG><a name="[3a]"></a>process_udp</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, at_udp.o(i.process_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = process_udp &rArr; CalcChksumBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r4
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumVal
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_hl_udp
</UL>

<P><STRONG><a name="[41]"></a>put_in_queue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, at_ethernet.o(i.put_in_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = put_in_queue &rArr; free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetch_packet
</UL>

<P><STRONG><a name="[a9]"></a>resize_mem</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, at_mem.o(i.resize_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = resize_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_enable_eth
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[38]"></a>run_dhcp_client</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, at_dhcp.o(i.run_dhcp_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = run_dhcp_client &rArr; dhcp_send_message &rArr; udp_send &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>

<P><STRONG><a name="[35]"></a>run_eth_link</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, at_ethernet.o(i.run_eth_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = run_eth_link &rArr; process_hl_tcp &rArr; process_tcp &rArr; tcp_send_reset &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_hl_igmp
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_ethernet
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_icmp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_arp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_update
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_hl_tcp
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_hl_udp
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>

<P><STRONG><a name="[37]"></a>run_http_server</STRONG> (Thumb, 734 bytes, Stack size 32 bytes, at_http.o(i.run_http_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = run_http_server &rArr; tcp_send &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fread
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fclose
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_script_line
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_strcpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_error_msg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_max_dsize
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_state
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_buf
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_func
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>

<P><STRONG><a name="[7d]"></a>set_u32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at_lib.o(i.set_u32))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
</UL>

<P><STRONG><a name="[24]"></a>str_copy</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at_lib.o(i.str_copy))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_error_msg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_data
</UL>

<P><STRONG><a name="[92]"></a>str_crc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at_lib.o(i.str_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = str_crc &rArr; get_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
</UL>

<P><STRONG><a name="[20]"></a>str_scomp</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at_lib.o(i.str_scomp))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_delim
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_to_utc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_file_type
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_rq
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_data
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_var
</UL>

<P><STRONG><a name="[a1]"></a>str_up_case</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at_lib.o(i.str_up_case))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_up_case
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_up_case
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[ba]"></a>tcp_abort</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, at_tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tcp_abort &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_http_server
</UL>

<P><STRONG><a name="[b5]"></a>tcp_close</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, at_tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = tcp_close &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_http_server
</UL>

<P><STRONG><a name="[b7]"></a>tcp_get_buf</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, at_tcp.o(i.tcp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_get_buf &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_http_server
</UL>

<P><STRONG><a name="[9a]"></a>tcp_get_socket</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, at_tcp.o(i.tcp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_http
</UL>

<P><STRONG><a name="[b4]"></a>tcp_get_state</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, at_tcp.o(i.tcp_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_http_server
</UL>

<P><STRONG><a name="[9b]"></a>tcp_listen</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, at_tcp.o(i.tcp_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_listen
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_http_server
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_http
</UL>

<P><STRONG><a name="[b6]"></a>tcp_max_dsize</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at_tcp.o(i.tcp_max_dsize))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_http_server
</UL>

<P><STRONG><a name="[36]"></a>tcp_poll_sockets</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, at_tcp.o(i.tcp_poll_sockets))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tcp_poll_sockets &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r5
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_retransmit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>

<P><STRONG><a name="[b9]"></a>tcp_send</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, at_tcp.o(i.tcp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tcp_send &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize_mem
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_retransmit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_http_server
</UL>

<P><STRONG><a name="[18]"></a>timer_tick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at_system.o(i.timer_tick))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>udp_close</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at_udp.o(i.udp_close))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_disable
</UL>

<P><STRONG><a name="[7b]"></a>udp_get_buf</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, at_udp.o(i.udp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_get_buf &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[97]"></a>udp_get_socket</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, at_udp.o(i.udp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_nbns
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dhcp
</UL>

<P><STRONG><a name="[98]"></a>udp_open</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, at_udp.o(i.udp_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = udp_open &rArr; udp_get_free_port
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_free_port
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_nbns
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dhcp
</UL>

<P><STRONG><a name="[73]"></a>udp_release_socket</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, at_udp.o(i.udp_release_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_release_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_disable
</UL>

<P><STRONG><a name="[7e]"></a>udp_send</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, at_udp.o(i.udp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = udp_send &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumVal
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumBuf
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[16]"></a>init_io</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, http_demo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, sam7.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sam7.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>def_interrupt</STRONG> (ARM, 20 bytes, Stack size 4 bytes, emac_sam7x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = def_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_sam7x.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>fetch_packet</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, emac_sam7x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fetch_packet &rArr; put_in_queue &rArr; free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_in_queue
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_ethernet (via Veneer)
</UL>

<P><STRONG><a name="[9]"></a>interrupt_ethernet</STRONG> (ARM, 112 bytes, Stack size 32 bytes, emac_sam7x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = interrupt_ethernet &rArr; fetch_packet &rArr; put_in_queue &rArr; free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_descr_init (via Veneer)
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetch_packet (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emac_sam7x.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>rx_descr_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, emac_sam7x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rx_descr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupt_ethernet (via Veneer)
</UL>

<P><STRONG><a name="[44]"></a>read_PHY</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, emac_sam7x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
</UL>

<P><STRONG><a name="[43]"></a>write_PHY</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, emac_sam7x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
</UL>

<P><STRONG><a name="[ae]"></a>tcp_init_seq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at_tcp.o(i.tcp_init_seq))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[a5]"></a>tcp_map_socket</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, at_tcp.o(i.tcp_map_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_map_socket &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[ad]"></a>tcp_process_opt</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, at_tcp.o(i.tcp_process_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_process_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[ab]"></a>tcp_send_ctrl</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at_tcp.o(i.tcp_send_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[bb]"></a>tcp_send_frame</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, at_tcp.o(i.tcp_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumVal
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
</UL>

<P><STRONG><a name="[ac]"></a>tcp_send_reset</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, at_tcp.o(i.tcp_send_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tcp_send_reset &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[a7]"></a>tcp_set_retransmit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, at_tcp.o(i.tcp_set_retransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_set_retransmit &rArr; free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[af]"></a>tcp_transit</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, at_tcp.o(i.tcp_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcp_transit &rArr; tcp_set_retransmit &rArr; free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_retransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[bc]"></a>udp_get_free_port</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, at_udp.o(i.udp_get_free_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udp_get_free_port
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_open
</UL>

<P><STRONG><a name="[6d]"></a>chk_post_rq</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, at_http.o(i.chk_post_rq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = chk_post_rq &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_strcpy
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_par
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_field
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_header
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[6e]"></a>cmp_header</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, at_http.o(i.cmp_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cmp_header
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_rq
</UL>

<P><STRONG><a name="[71]"></a>get_next_field</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at_http.o(i.get_next_field))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_rq
</UL>

<P><STRONG><a name="[70]"></a>get_next_par</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, at_http.o(i.get_next_par))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_rq
</UL>

<P><STRONG><a name="[86]"></a>hex2byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at_http.o(i.hex2byte))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_var
</UL>

<P><STRONG><a name="[81]"></a>http_add_header</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, at_http.o(i.http_add_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = http_add_header &rArr; utc_to_http &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgx_content_type
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utc_to_http
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_http_server
</UL>

<P><STRONG><a name="[84]"></a>http_error_msg</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, at_http.o(i.http_error_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = http_error_msg
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_http_server
</UL>

<P><STRONG><a name="[85]"></a>http_file_type</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, at_http.o(i.http_file_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = http_file_type
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[87]"></a>http_kill_session</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, at_http.o(i.http_kill_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = http_kill_session &rArr; cgi_process_data &rArr; http_get_var
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fclose
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_data
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_http_server
</UL>

<P><STRONG><a name="[11]"></a>http_listener</STRONG> (Thumb, 544 bytes, Stack size 24 bytes, at_http.o(i.http_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = http_listener &rArr; cgi_process_var &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept_host
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_script_line
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_strchr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_post
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_open_file
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_kill_session
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_file_type
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_rq
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_var
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_http.o(i.init_http)
</UL>
<P><STRONG><a name="[8c]"></a>http_open_file</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, at_http.o(i.http_open_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = http_open_file &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_crc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fopen
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_finfo
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_http_server
</UL>

<P><STRONG><a name="[8a]"></a>http_proc_header</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, at_http.o(i.http_proc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = http_proc_header &rArr; http_to_utc &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b64_to_asc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_to_utc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_field
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_header
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[8f]"></a>http_proc_multipart</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, at_http.o(i.http_proc_multipart))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = http_proc_multipart &rArr; cgi_process_data &rArr; http_get_var
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_delim
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_strchr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_par
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_field
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_header
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_data
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[8d]"></a>http_proc_post</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, at_http.o(i.http_proc_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = http_proc_post &rArr; cgi_process_data &rArr; http_get_var
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cgi_process_data
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[8b]"></a>http_strchr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, at_http.o(i.http_strchr))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
</UL>

<P><STRONG><a name="[6f]"></a>http_strcpy</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, at_http.o(i.http_strcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = http_strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_post_rq
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_http_server
</UL>

<P><STRONG><a name="[94]"></a>http_to_utc</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, at_http.o(i.http_to_utc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = http_to_utc &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_header
</UL>

<P><STRONG><a name="[8e]"></a>read_script_line</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, at_http.o(i.read_script_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_script_line
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fgets
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_listener
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_http_server
</UL>

<P><STRONG><a name="[95]"></a>search_delim</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, at_http.o(i.search_delim))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = search_delim
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_scomp
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_proc_multipart
</UL>

<P><STRONG><a name="[83]"></a>utc_to_http</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, at_http.o(i.utc_to_http))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = utc_to_http &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_add_header
</UL>

<P><STRONG><a name="[12]"></a>nbns_listener</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, at_nbns.o(i.nbns_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = nbns_listener &rArr; udp_send &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_up_case
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_buf
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_nbns.o(i.init_nbns)
</UL>
<P><STRONG><a name="[10]"></a>dhcp_listener</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, at_dhcp.o(i.dhcp_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dhcp_listener &rArr; dhcp_send_message &rArr; udp_send &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_notify (Weak Reference)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_sel
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_renew
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_dhcp.o(i.init_dhcp)
</UL>
<P><STRONG><a name="[78]"></a>dhcp_send_message</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, at_dhcp.o(i.dhcp_send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dhcp_send_message &rArr; udp_send &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_buf
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_dhcp_client
</UL>

<P><STRONG><a name="[7a]"></a>proc_opt_renew</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, at_dhcp.o(i.proc_opt_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = proc_opt_renew &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[79]"></a>proc_opt_req</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, at_dhcp.o(i.proc_opt_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = proc_opt_req &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[77]"></a>proc_opt_sel</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, at_dhcp.o(i.proc_opt_sel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = proc_opt_sel &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[64]"></a>arp_cache_alloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, at_arp.o(i.arp_cache_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>

<P><STRONG><a name="[69]"></a>arp_get_response</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, at_arp.o(i.arp_get_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = arp_get_response &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_arp
</UL>

<P><STRONG><a name="[6a]"></a>arp_send_reply</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, at_arp.o(i.arp_send_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = arp_send_reply &rArr; arp_cache_add &rArr; is_subnet &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_frame
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_arp
</UL>

<P><STRONG><a name="[9e]"></a>ip_get_chksum</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, at_ip.o(i.ip_get_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip_get_chksum &rArr; CalcChksum &rArr; CalcChksumBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksum
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
</UL>

<P><STRONG><a name="[5c]"></a>_printf_core</STRONG> (Thumb, 1092 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>

<P><STRONG><a name="[5e]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r6
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5d]"></a>_printf_pre_padding</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r6
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL>
<P><STRONG><a name="[d]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[56]"></a>_scanf_longlong</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[55]"></a>_scanf_real</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[57]"></a>_scanf_string</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[74]"></a>arp_notify</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_disable
</UL>
<HR></body></html>
